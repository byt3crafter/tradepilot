// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ───────────────────────────────────────────────────────────────────────────────
// Enums
// ───────────────────────────────────────────────────────────────────────────────

enum VerificationTokenType {
  EMAIL_VERIFY
  EMAIL_CHANGE
}

enum BrokerAccountType {
  DEMO
  LIVE
  PROP_FIRM
}

enum TradeResult {
  Win
  Loss
  Breakeven
}

enum Direction {
  Buy
  Sell
}

// --- NEW: Enums for Subscriptions and Roles ---
enum Role {
  USER
  ADMIN
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
}


// ───────────────────────────────────────────────────────────────────────────────
// Models
// ───────────────────────────────────────────────────────────────────────────────

// Case-insensitive text extension for email
// You may need to run `CREATE EXTENSION IF NOT EXISTS citext;` in your DB manually
// or as part of an initial migration script.

model User {
  id              String   @id @default(uuid())
  email           String   @unique @db.Citext
  passwordHash    String
  fullName        String?
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLoginAt     DateTime?

  // --- NEW: Fields for Subscriptions and Roles ---
  role                 Role               @default(USER)
  subscriptionStatus   SubscriptionStatus @default(TRIALING)
  trialEndsAt          DateTime?
  paddleCustomerId     String?            @unique
  paddleSubscriptionId String?            @unique
  // --- END NEW ---

  // --- PRO ACCESS OVERRIDE ---
  proAccessExpiresAt   DateTime?
  proAccessReason      String?
  // --- END PRO ACCESS OVERRIDE ---

  refreshSessions     RefreshSession[]
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  authAudits          AuthAudit[]

  // Domain models
  brokerAccounts      BrokerAccount[]
  strategies          Strategy[]
  checklistRules      ChecklistRule[]
  trades              Trade[]

  @@map("users")
}

model RefreshSession {
  id        String   @id @default(uuid())
  tokenHash String   @unique
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
  revokedAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
  @@map("refresh_sessions")
}

model VerificationToken {
  id        String                @id @default(uuid())
  tokenHash String
  type      VerificationTokenType
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime              @default(now())
  payload   Json? // For storing extra data, e.g., new email for email change

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([tokenHash, type])
  @@index([userId])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  tokenHash String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
  @@map("password_reset_tokens")
}

model AuthAudit {
  id         String   @id @default(uuid())
  event      String // e.g., 'login_success', 'login_failed', 'register_requested'
  emailTried String?  @db.Citext
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  @@index([userId])
  @@index([emailTried])
  @@map("auth_audits")
}

model BrokerAccount {
  id             String            @id @default(cuid())
  name           String
  type           BrokerAccountType
  initialBalance Float
  currentBalance Float
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  trades      Trade[]
  objectives  TradingObjective?
  smartLimits SmartLimit? // NEW: Relation to personal risk rules

  @@index([userId])
}

model Strategy {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  trades Trade[]

  @@index([userId])
}

model ChecklistRule {
  id        String   @id @default(cuid())
  rule      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// ───────────────────────────────────────────────────────────────────────────────
// Trades, Journals & AI Analysis
// ───────────────────────────────────────────────────────────────────────────────

model Trade {
  id                  String       @id @default(cuid())
  tradeDate           DateTime     @default(now())
  asset               String
  entryDate           DateTime     @default(now()) // Rename tradeDate to entryDate
  exitDate            DateTime?                    // Add this new field for exit time
  direction           Direction
  entryPrice          Float
  exitPrice           Float?
  riskPercentage      Float
  rr                  Float?
  profitLoss          Float?
  result              TradeResult?
  isPendingOrder      Boolean      @default(false)



  // --- UPDATED: Execution details ---
  lotSize             Float?
  stopLoss            Float?
  takeProfit          Float?
  commission          Float?
  swap                Float?
  // --- END UPDATE ---

  screenshotBeforeUrl String?
  screenshotAfterUrl  String?

  aiAnalysis   AiAnalysis?
  tradeJournal TradeJournal?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)

  brokerAccountId String
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)

  strategyId String
  strategy   Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([brokerAccountId])
  @@index([strategyId])
}

// NEW: Model for detailed, reflective journal entries
model TradeJournal {
  id        String   @id @default(cuid())

  mindsetBefore   String
  exitReasoning   String
  lessonsLearned  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tradeId String @unique
  trade   Trade  @relation(fields: [tradeId], references: [id], onDelete: Cascade)
}

model AiAnalysis {
  id         String   @id @default(cuid())
  summary    String
  mistakes   Json
  goodPoints Json

  createdAt DateTime @default(now())

  tradeId String @unique
  trade   Trade  @relation(fields: [tradeId], references: [id], onDelete: Cascade)
}

model TradingObjective {
  id             String   @id @default(cuid())
  profitTarget   Float?
  minTradingDays Int?
  maxLoss        Float?
  maxDailyLoss   Float?
  isEnabled      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  brokerAccountId String        @unique
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)
}

// NEW: Model for Smart Limits (Personal Risk Management)
model SmartLimit {
  id              String   @id @default(cuid())
  isEnabled       Boolean  @default(false)
  maxRiskPerTrade Float?   // e.g., 1.5 for 1.5%
  maxTradesPerDay Int?     // e.g., 3
  maxLossesPerDay Int?     // e.g., 2
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  brokerAccountId String        @unique
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)
}
