// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ───────────────────────────────────────────────────────────────────────────────
// Enums
// ───────────────────────────────────────────────────────────────────────────────

enum VerificationTokenType {
  EMAIL_VERIFY
  EMAIL_CHANGE
}

enum BrokerAccountType {
  DEMO
  LIVE
  PROP_FIRM
}

enum TradeResult {
  Win
  Loss
  Breakeven
}

enum Direction {
  Buy
  Sell
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
}

enum ChecklistItemType {
  ENTRY_CRITERIA
  RISK_MANAGEMENT
}

// --- NEW: ANALYSIS TRACKER ENUMS ---
enum IncomeCategory {
  ACTIVE_INCOME
  DAILY_INCOME
  WEEKLY_INCOME
  MONTHLY_INCOME
  LONG_TERM_INCOME
}

enum AssetClass {
  FOREX
  INDEX
  METAL
  CRYPTO
  EQUITY
  ENERGY
}

enum MarketVenue {
  SPOT
  CFD
  FUTURES
  PERP
  OPTIONS
}

enum InstrumentSubtype {
  FOREX_PAIR
  INDEX_CFD
  METAL_CFD
  METAL_FUT
  CRYPTO_SPOT
  CRYPTO_PERP
  INDEX_FUT
  EQUITY_CFD
  EQUITY_SPOT
}

enum ReviewCycle {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
}

enum AnalysisStatus {
  WATCHING
  ALERTED
  TRIGGERED
  EXECUTED
  MISSED
  EXPIRED
  ARCHIVED
}

// ───────────────────────────────────────────────────────────────────────────────
// Models
// ───────────────────────────────────────────────────────────────────────────────

model User {
  id              String   @id @default(uuid())
  email           String   @unique @db.Citext
  passwordHash    String
  fullName        String?
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLoginAt     DateTime?

  role                 Role               @default(USER)
  subscriptionStatus   SubscriptionStatus @default(TRIALING)
  trialEndsAt          DateTime?
  paddleCustomerId     String?            @unique
  paddleSubscriptionId String?            @unique
  proAccessExpiresAt   DateTime?
  proAccessReason      String?

  refreshSessions     RefreshSession[]
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  authAudits          AuthAudit[]

  // Domain models
  brokerAccounts      BrokerAccount[]
  playbooks           Playbook[]
  checklistRules      ChecklistRule[]
  trades              Trade[]
  assetSpecifications AssetSpecification[]

  // Analysis Tracker
  analysisSessions AnalysisSession[]
  analyses         Analysis[]
  notifications    Notification[]

  @@map("users")
}

model RefreshSession {
  id        String   @id @default(uuid())
  tokenHash String   @unique
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
  revokedAt DateTime?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  @@index([userId])
  @@map("refresh_sessions")
}

model VerificationToken {
  id        String                @id @default(uuid())
  tokenHash String
  type      VerificationTokenType
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime              @default(now())
  payload   Json?
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  @@unique([tokenHash, type])
  @@index([userId])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  tokenHash String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  @@index([userId])
  @@map("password_reset_tokens")
}

model AuthAudit {
  id         String   @id @default(uuid())
  event      String
  emailTried String?  @db.Citext
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  @@index([userId])
  @@index([emailTried])
  @@map("auth_audits")
}

model BrokerAccount {
  id             String            @id @default(cuid())
  name           String
  type           BrokerAccountType
  initialBalance Float
  currentBalance Float
  currency       String            @default("USD")
  leverage       Int?

  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  trades         Trade[]
  objectives     TradingObjective?
  smartLimits    SmartLimit?

  // Analysis Tracker
  analyses Analysis[]

  @@index([userId])
  @@map("broker_accounts")
}

// ───────────────────────────────────────────────────────────────────────────────
// Playbook Schema
// ───────────────────────────────────────────────────────────────────────────────

model Playbook {
  id            String   @id @default(cuid())
  name          String
  coreIdea      String?
  isPublic      Boolean  @default(false)
  tradingStyles String[]
  instruments   String[]
  timeframes    String[]
  pros          String[]
  cons          String[]

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  setups PlaybookSetup[]
  trades Trade[]

  @@index([userId])
  @@map("playbooks")
}

model PlaybookSetup {
  id                  String   @id @default(cuid())
  name                String
  screenshotBeforeUrl String?
  screenshotAfterUrl  String?

  playbookId String
  playbook   Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  checklistItems ChecklistItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([playbookId])
  @@map("playbook_setups")
}

model ChecklistItem {
  id      String            @id @default(cuid())
  text    String
  type    ChecklistItemType

  setupId String
  setup   PlaybookSetup @relation(fields: [setupId], references: [id], onDelete: Cascade)

  @@index([setupId])
  @@map("checklist_items")
}

model ChecklistRule {
  id        String   @id @default(cuid())
  rule      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@map("checklist_rules")
}

// ───────────────────────────────────────────────────────────────────────────────
// Trades, Journals & AI Analysis
// ───────────────────────────────────────────────────────────────────────────────

model Trade {
  id                  String       @id @default(cuid())
  asset               String
  entryDate           DateTime     @default(now())
  exitDate            DateTime?
  direction           Direction
  entryPrice          Float
  exitPrice           Float?
  riskPercentage      Float
  rr                  Float?
  profitLoss          Float?
  result              TradeResult?
  isPendingOrder      Boolean      @default(false)
  lotSize             Float?
  stopLoss            Float?
  takeProfit          Float?
  commission          Float?
  swap                Float?
  screenshotBeforeUrl String?
  screenshotAfterUrl  String?

  aiAnalysis   AiAnalysis?
  tradeJournal TradeJournal?

  // Relations
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Restrict)
  brokerAccountId String
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)

  playbookId String
  playbook   Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([brokerAccountId])
  @@index([playbookId])
  @@map("trades")
}

model TradeJournal {
  id             String   @id @default(cuid())
  mindsetBefore  String
  exitReasoning  String
  lessonsLearned String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tradeId        String   @unique
  trade          Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  @@map("trade_journals")
}

model AiAnalysis {
  id         String   @id @default(cuid())
  summary    String
  mistakes   Json
  goodPoints Json
  createdAt  DateTime @default(now())
  tradeId    String   @unique
  trade      Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  @@map("ai_analyses")
}

model TradingObjective {
  id              String        @id @default(cuid())
  profitTarget    Float?
  minTradingDays  Int?
  maxLoss         Float?
  maxDailyLoss    Float?
  isEnabled       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  brokerAccountId String        @unique
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)
  @@map("trading_objectives")
}

model SmartLimit {
  id              String        @id @default(cuid())
  isEnabled       Boolean       @default(false)
  maxRiskPerTrade Float?
  maxTradesPerDay Int?
  maxLossesPerDay Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  brokerAccountId String        @unique
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)
  @@map("smart_limits")
}


// ───────────────────────────────────────────────────────────────────────────────
// Asset Specifications for Calculations
// ───────────────────────────────────────────────────────────────────────────────

model AssetSpecification {
  id            String  @id @default(cuid())
  symbol        String
  name          String
  valuePerPoint Float?
  pipSize       Float?
  lotSize       Float?
  quoteCurrency String  @default("USD")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol]) // Ensure a user can only have one spec per symbol
  @@map("asset_specifications")
}

// ───────────────────────────────────────────────────────────────────────────────
// Analysis Tracker
// ───────────────────────────────────────────────────────────────────────────────

model AnalysisSession {
  id          String   @id @default(cuid())
  name        String // e.g., "Week 42 Prep", "Ad-hoc FX Review"
  description String?
  isArchived  Boolean  @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  analyses Analysis[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("analysis_sessions")
}

model Analysis {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId       String?
  session         AnalysisSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  brokerId        String
  brokerAccount   BrokerAccount @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  screenshotUrls  String[]

  // Classification
  category        IncomeCategory
  assetClass      AssetClass
  marketVenue     MarketVenue
  instrumentSubtype InstrumentSubtype?
  contract        Json?
  leverage        Int?
  
  // Context
  symbol          String
  assetName       String?
  exchange        String?
  quote           Json?
  platforms       Json?

  // Analysis Details
  htf             String?
  ltf             String[]
  directionalBias Direction
  structureNotes  String?
  levels          Json?
  triggers        Json?
  
  // Invalidation & Validity
  invalidation    Json?
  validityStartsAt DateTime?
  validityExpiresAt DateTime?
  invalidatedAt   DateTime?
  invalidReason   String?

  // Review & Status
  reviewCycle     ReviewCycle
  nextReviewAt    DateTime
  status          AnalysisStatus @default(WATCHING)
  
  // Meta & Threading
  attachments     Json?
  tags            String[]
  activityLog     Json?
  revision        Int      @default(1)

  parentAnalysisId String?
  parentAnalysis   Analysis? @relation("AnalysisRevisions", fields: [parentAnalysisId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  revisions        Analysis[] @relation("AnalysisRevisions")

  notification Notification?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([sessionId])
  @@index([brokerId])
  @@index([parentAnalysisId])
  @@map("analyses")
}

// ───────────────────────────────────────────────────────────────────────────────
// Notifications
// ───────────────────────────────────────────────────────────────────────────────
model Notification {
  id         String   @id @default(cuid())
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  analysisId String?  @unique
  analysis   Analysis? @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}